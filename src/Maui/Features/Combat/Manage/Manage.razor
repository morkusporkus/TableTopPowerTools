@page "/combat"
@using TabletopPowerTools.Maui.Features.Creatures.Shared.CreatureDetail

<div>
    <MudGrid>
        <MudItem xs="6">
            <CreatureSearch OnCreatureAdded="AddCreatureToEncounter" />
        </MudItem>
        <MudItem xs="10">
            <MudButtonGroup OverrideStyles=false>
                <MudButton StartIcon="@RpgIcons.Miscellaneous.D20" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="OnBeginCombatClicked" Disabled=_combatEncounter.IsCombatActive()>Begin Combat</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.ArrowLeft" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnPreviousTurnClicked" Disabled=@(!_combatEncounter.IsCombatActive())>Prev</MudButton>
                <MudButton EndIcon="@Icons.Material.Filled.ArrowRight" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnNextTurnClicked" Disabled=@(!_combatEncounter.IsCombatActive())>Next</MudButton>
            </MudButtonGroup>
        </MudItem>
        <MudItem xs="2">
            <MudText Typo="Typo.h6" Color=Color.Secondary>Round @_combatEncounter.Round</MudText>
        </MudItem>

        @foreach (var initiatedCreature in _combatEncounter.Creatures)
        {
            var activeClass = _combatEncounter.IsCreaturesTurn(initiatedCreature) ? "activeCreature" : string.Empty;

            <MudItem md="3" xs="12">
                <MudCard Class="@activeClass">
                    <MudStack Row=true Justify="Justify.SpaceEvenly" Spacing="0">
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowLeft" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="() => OnReorderCreaturePreviousClicked(initiatedCreature)" FullWidth=true Style="border-radius: 0;" />
                        <MudButton StartIcon="@Icons.Material.Outlined.Delete" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="() => OnRemoveFromCombatClicked(initiatedCreature)" FullWidth=true Style="border-radius: 0;" />
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowRight" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="() => OnReorderCreatureNextClicked(initiatedCreature)" FullWidth=true Style="border-radius: 0;" />
                    </MudStack>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@initiatedCreature.Creature.Name</MudText>
                            <MudStack Row=true>
                                <MudNumericField Label="HP" @bind-Value="initiatedCreature.HitPoints" Min="0"></MudNumericField>
                                <MudTextField Label="CR" Value="initiatedCreature.Creature.Cr" ReadOnly="true"></MudTextField>
                                <MudTextField Label="AC" Value="initiatedCreature.Creature.ArmorClass" ReadOnly="true"></MudTextField>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.caption"><b>Initiative Roll:</b>:@initiatedCreature.InitiativeRoll</MudText>
                        <MudButton Color="Color.Secondary" OnClick="@(() => OnCreatureDetailsClicked(initiatedCreature.Creature.Id))">Details</MudButton>
                    </MudCardContent>
                    <MudCardActions>
                        <MudGrid Spacing="1">
                            @foreach (var activeCondition in initiatedCreature.ActiveConditions)
                            {
                                var infiniteRoundsIcons = activeCondition.RoundsRemaining is null ? @Icons.Material.Filled.Repeat : string.Empty;
                                <MudItem xs="6">
                                    <MudBadge Content="activeCondition.RoundsRemaining.ToString()" Overlap="true" Bordered="true" Color="Color.Secondary" Icon="@infiniteRoundsIcons" Style="width: 100%;">
                                        <MudButton Color="activeCondition.Condition.Color" StartIcon="@activeCondition.Condition.Icon" OnClick="() => OnConditionRemovedClicked(initiatedCreature, activeCondition)" Variant="Variant.Filled" Size="Size.Small" FullWidth=true>
                                            @activeCondition.Condition.Name
                                        </MudButton>
                                    </MudBadge>
                                </MudItem>
                            }
                            <MudItem xs="6">
                                <MudMenu StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Outlined" Dense="true" Label="Cond." Size="Size.Small">
                                    @foreach (var inactiveCondition in initiatedCreature.InactiveConditions)
                                    {
                                        <MudMenuItem Icon="@inactiveCondition.Icon" IconColor="inactiveCondition.Color" OnClick="() => OnConditionAddedClicked(initiatedCreature, inactiveCondition)">
                                            @inactiveCondition.Name
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudItem>
                        </MudGrid>

                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

        <CreatureDetailDrawer @bind-Open=_showCreatureDetails CreatureId="_clickedCreatureId" />
    </MudGrid>
</div>
